/**
 * Copyright 2016 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var pairs = require('lodash.pairs');
var format = require('./utilities/format-text');

var PersonalityTraitDescriptionsImpl = function () {
  function PersonalityTraitDescriptionsImpl(options, I18nData) {
    _classCallCheck(this, PersonalityTraitDescriptionsImpl);

    this._options = options;
    this.I18nData = I18nData;
    this.setLocale(options.locale);
  }

  _createClass(PersonalityTraitDescriptionsImpl, [{
    key: 'setLocale',
    value: function setLocale(locale) {
      if (this._locale !== locale) {
        this._locale = locale;
        var i18n = new this.I18nData(locale);
        this._descriptions = i18n.data();
      }
    }
  }, {
    key: 'description',
    value: function description(traitId) {
      return format(this._descriptions[traitId], this._options);
    }
  }, {
    key: 'descriptions',
    value: function descriptions() {
      return pairs(this._descriptions).map(function (p) {
        return p[1];
      });
    }
  }]);

  return PersonalityTraitDescriptionsImpl;
}();

module.exports = PersonalityTraitDescriptionsImpl;